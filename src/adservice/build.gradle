plugins {
    id 'java'
    id 'com.google.protobuf' version '0.9.5'
    id 'com.github.sherter.google-java-format' version '0.9'
    id 'idea'
    id 'application'
}

repositories {
    mavenCentral()
    mavenLocal()
}

description = 'Ad Service'
group = "adservice"
version = "0.1.0-SNAPSHOT"

def grpcVersion = "1.76.0"
def jacksonCoreVersion = "2.20.0"
def jacksonDatabindVersion = "2.20.0"
def protocVersion = "4.32.1"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17) // use your installed JDK version
    }
}

tasks.withType(JavaCompile) {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}


ext {
    speed = project.hasProperty('speed') ? project.getProperty('speed') : false
    offlineCompile = new File("$buildDir/output/lib")
}

dependencies {
    if (speed) {
        implementation fileTree(dir: offlineCompile, include: '*.jar')
    } else {
        // === Core gRPC runtime and dependencies ===
        implementation "com.google.api.grpc:proto-google-common-protos:2.61.3"
        implementation "javax.annotation:javax.annotation-api:1.3.2"
        implementation "io.grpc:grpc-protobuf:${grpcVersion}"
        implementation "io.grpc:grpc-stub:${grpcVersion}"
        implementation "io.grpc:grpc-netty:${grpcVersion}"
        implementation "io.grpc:grpc-services:${grpcVersion}"
        implementation "io.grpc:grpc-census:${grpcVersion}"
        implementation "org.apache.logging.log4j:log4j-core:2.25.2"
        implementation "com.google.protobuf:protobuf-java:${protocVersion}"

        runtimeOnly "com.fasterxml.jackson.core:jackson-core:${jacksonCoreVersion}"
        runtimeOnly "com.fasterxml.jackson.core:jackson-databind:${jacksonDatabindVersion}"
        runtimeOnly "io.netty:netty-tcnative-boringssl-static:2.0.74.Final"
    }

    // === Additional libraries needed for tests ===
    implementation 'com.google.guava:guava:33.2.1-jre'
    implementation 'org.apache.logging.log4j:log4j-api:2.24.0'

    // === JUnit 5 ===
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'

    // === Mockito ===
    testImplementation 'org.mockito:mockito-core:5.12.0'
    testImplementation 'org.mockito:mockito-inline:5.2.0'

    // === Optional: AssertJ for fluent assertions ===
    testImplementation 'org.assertj:assertj-core:3.25.3'
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protocVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
        ofSourceSet('main')
    }
}

googleJavaFormat {
    toolVersion '1.29.0'
}

sourceSets {
    main {
        java {
            srcDirs 'hipstershop'
            srcDirs 'build/generated/source/proto/main/java/hipstershop'
            srcDirs 'build/generated/source/proto/main/grpc/hipstershop'
        }
    }
}

startScripts.enabled = false

task downloadRepos(type: Copy) {
    from configurations.compileClasspath
    into offlineCompile
}

task adService(type: CreateStartScripts) {
    mainClass.set('hipstershop.AdService')
    applicationName = 'AdService'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task adServiceClient(type: CreateStartScripts) {
    mainClass.set('hipstershop.AdServiceClient')
    applicationName = 'AdServiceClient'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

applicationDistribution.into('bin') {
    from(adService)
    from(adServiceClient)
    fileMode = 0755
}

jar {
    manifest {
        attributes(
            'Main-Class': 'hipstershop.AdService'
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}
